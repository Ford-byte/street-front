<template>
    <HeaderComponent />
    <section class="h-screen bg-gray-900">
        <div class="flex justify-center m-4">
            <div class="flex flex-col max-w-3xl p-6 space-y-4 sm:p-10 dark:bg-gray-50 dark:text-gray-800 rounded-md">
                <h2 class="text-xl font-semibold">Check Out</h2>
                <ul class="flex flex-col divide-y dark:divide-gray-300">
                    <li v-for="item in checkedItems" :key="item.product.SW_Id"
                        class="flex flex-col py-6 sm:flex-row sm:justify-between">
                        <div class="flex w-full space-x-2 sm:space-x-4">
                            <img class="flex-shrink-0 object-cover w-20 h-20 dark:bg-gray-500 sm:w-32 sm:h-32 rounded"
                                :src="getImageUrl(item.product.SW_Images)" :alt="item.product.SW_Name" />
                            <div class="flex flex-col justify-between w-full pb-4">
                                <div class="flex justify-between w-full pb-2 space-x-2">
                                    <div class="space-y-1">
                                        <h3 class="text-lg font-semibold leading-snug sm:pr-8">{{ item.product.SW_Name
                                            }}</h3>
                                        <p class="text-sm dark:text-gray-600">Size: {{ item.size }}</p>
                                        <p class="text-sm dark:text-gray-600">Quantity: {{ item.quantity }}</p>
                                    </div>
                                    <div class="text-right">
                                        <p class="text-lg font-semibold">₱{{ (item.product.SW_Price *
                                            item.quantity).toFixed(2) }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>
                <div class="flex w-full justify-end">
                    <select name="" id="">
                        <option value="cod">Cash on Delivery</option>
                        <option value="gcash">Gcash</option>
                    </select>
                </div>
                <div class="space-y-1 text-right">
                    <p>Total amount: <span class="font-semibold">₱{{ calculateTotal() }}</span></p>
                </div>
                <div class="flex flex-col-reverse sm:flex-row justify-end sm:space-x-4">
                    <button type="button" @click="router.push('/cart')" aria-label="Go back to cart"
                        class="m-2 md:px-6 md:py-2 border rounded-md ">
                        Back
                    </button>
                    <button type="button" @click="placeOrder" aria-label="Place your order"
                        class="m-2 md:px-6 md:py-2 border rounded-md dark:bg-violet-600 dark:text-gray-50 ">
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </section>
</template>

<script setup>
import { useCartStore } from '@/stores/cart';
import router from '@/router';
import HeaderComponent from './HeaderComponent.vue';
import { computed, ref } from 'vue';
import axios, { backLink } from '../../../axios';
const cartStore = useCartStore();

const getImageUrl = (imagePath) => `${backLink}/images/${imagePath}`;

const checkedItems = computed(() => {
    return cartStore.cart.filter(item => item.selected);
});

const calculateTotal = () => {
    return checkedItems.value.reduce((total, item) => {
        return total + (item.product.SW_Price * item.quantity);
    }, 0).toFixed(2);
};

const dataItems = ref([])
dataItems.value.push(checkedItems.value);
const orders = ref([]);

const placeOrder = async () => {
    if (checkedItems.value.length === 0) {
        showNotification("No items selected to place an order.");
        return;
    }

    const confirmation = confirm("Are you sure you want to place the order?");
    if (!confirmation) return;

    try {
        checkedItems.value.forEach(item => {
            const orderDetails = {
                uid: localStorage.getItem('Id'),
                pid: item.product.SW_Size_id,
                uname: localStorage.getItem('name'),
                pname: item.product.SW_Name,
                price: item.product.SW_Price,
                size: item.size,
                quantity: item.quantity,
                amount:calculateTotal(),
                psid: item.product.SW_Size_id,
                location: localStorage.getItem('location')
            };
            orders.value.push(orderDetails); // Add the order details to the `orders` array
            confirmRemoveFromCart(item); // Simulate removing the item from the cart
        });
        orders.value

        const { 
            data: { clientSecret},
        }= await axios.post("/api/create-payment-intent", {
            amount: calculateTotal(),
            currency : "PHP"
        }) ;

        const {data} = await axios.post("/api/paymongo-checkout",{
            clientSecret,
            items: orders.value
        });
        if (data.checkoutUrl) {
            window.location.href = data.checkoutUrl;

        } else {
            console.error("Checkout URL not found in response.");
        }
        const updatedCart = cartStore.cart.filter(item => !item.selected);
        localStorage.setItem('cart', JSON.stringify(updatedCart));

        showNotification("Order placed successfully!");
    } catch (error) {
        console.error("Error placing order:", error);
        showNotification("There was an error placing your order. Please try again.");
    }
};


const showNotification = (message) => {
    alert(message); // Replace with a proper notification system
};


const confirmRemoveFromCart = (item) => {
        cartStore.removeFromCart(item.product.SW_Id, item.size);
};
</script>
<template>
    <HeaderComponent />
    <section class="h-screen bg-gray-900">
        <div class="flex justify-center m-4">
            <div class="flex flex-col max-w-3xl p-6 space-y-4 sm:p-10 dark:bg-gray-50 dark:text-gray-800 rounded-md">
                <h2 class="text-xl font-semibold">Check Out</h2>
                <ul class="flex flex-col divide-y dark:divide-gray-300">
                    <li v-for="item in checkedItems" :key="item.product.SW_Id"
                        class="flex flex-col py-6 sm:flex-row sm:justify-between">
                        <div class="flex w-full space-x-2 sm:space-x-4">
                            <img class="flex-shrink-0 object-cover w-20 h-20 dark:bg-gray-500 sm:w-32 sm:h-32 rounded"
                                :src="getImageUrl(item.product.SW_Images)" :alt="item.product.SW_Name" />
                            <div class="flex flex-col justify-between w-full pb-4">
                                <div class="flex justify-between w-full pb-2 space-x-2">
                                    <div class="space-y-1">
                                        <h3 class="text-lg font-semibold leading-snug sm:pr-8">{{ item.product.SW_Name
                                            }}</h3>
                                        <p class="text-sm dark:text-gray-600">Size: {{ item.size }}</p>
                                        <p class="text-sm dark:text-gray-600">Quantity: {{ item.quantity }}</p>
                                    </div>
                                    <div class="text-right">
                                        <p class="text-lg font-semibold">₱{{ (item.product.SW_Price *
                                            item.quantity).toFixed(2) }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>
                <div class="flex w-full justify-end">
                    <select name="" id="">
                        <option value="cod">Cash on Delivery</option>
                        <option value="gcash">Gcash</option>
                    </select>
                </div>
                <div class="space-y-1 text-right">
                    <p>Total amount: <span class="font-semibold">₱{{ calculateTotal() }}</span></p>
                </div>
                <div class="flex flex-col-reverse sm:flex-row justify-end sm:space-x-4">
                    <button type="button" @click="router.push('/cart')" aria-label="Go back to cart"
                        class="m-2 md:px-6 md:py-2 border rounded-md ">
                        Back
                    </button>
                    <button type="button" @click="placeOrder" aria-label="Place your order"
                        class="m-2 md:px-6 md:py-2 border rounded-md dark:bg-violet-600 dark:text-gray-50 ">
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </section>
</template>

<script setup>
import { useCartStore } from '@/stores/cart';
import router from '@/router';
import HeaderComponent from './HeaderComponent.vue';
import { computed, ref } from 'vue';
import axios, { backLink } from '../../../axios';
const cartStore = useCartStore();

const getImageUrl = (imagePath) => `${backLink}/images/${imagePath}`;

const checkedItems = computed(() => {
    return cartStore.cart.filter(item => item.selected);
});

const calculateTotal = () => {
    return checkedItems.value.reduce((total, item) => {
        return total + (item.product.SW_Price * item.quantity);
    }, 0).toFixed(2);
};

const dataItems = ref([])
dataItems.value.push(checkedItems.value);
const orders = ref([]);

const placeOrder = async () => {
    if (checkedItems.value.length === 0) {
        showNotification("No items selected to place an order.");
        return;
    }

    const confirmation = confirm("Are you sure you want to place the order?");
    if (!confirmation) return;

    try {
        checkedItems.value.forEach(item => {
            const orderDetails = {
                uid: localStorage.getItem('Id'),
                pid: item.product.SW_Size_id,
                uname: localStorage.getItem('name'),
                pname: item.product.SW_Name,
                price: item.product.SW_Price,
                size: item.size,
                quantity: item.quantity,
                amount:calculateTotal(),
                psid: item.product.SW_Size_id,
                location: localStorage.getItem('location')
            };
            orders.value.push(orderDetails); // Add the order details to the `orders` array
            confirmRemoveFromCart(item); // Simulate removing the item from the cart
        });
        orders.value

        const { 
            data: { clientSecret},
        }= await axios.post("/api/create-payment-intent", {
            amount: calculateTotal(),
            currency : "PHP"
        }) ;

        const {data} = await axios.post("/api/paymongo-checkout",{
            clientSecret,
            items: orders.value
        });
        if (data.checkoutUrl) {
            window.location.href = data.checkoutUrl;

        } else {
            console.error("Checkout URL not found in response.");
        }
        const updatedCart = cartStore.cart.filter(item => !item.selected);
        localStorage.setItem('cart', JSON.stringify(updatedCart));

        showNotification("Order placed successfully!");
    } catch (error) {
        console.error("Error placing order:", error);
        showNotification("There was an error placing your order. Please try again.");
    }
};


const showNotification = (message) => {
    alert(message); // Replace with a proper notification system
};


const confirmRemoveFromCart = (item) => {
        cartStore.removeFromCart(item.product.SW_Id, item.size);
};
</script>
